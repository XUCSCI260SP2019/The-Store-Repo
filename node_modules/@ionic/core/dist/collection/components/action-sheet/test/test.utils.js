import { newE2EPage } from '@stencil/core/testing';
import { cleanScreenshotName, generateE2EUrl } from '../../../utils/test/utils';
export async function testActionSheet(type, selector, rtl = false, afterScreenshotHook = async (..._args) => { }, screenshotName = cleanScreenshotName(selector)) {
    try {
        const pageUrl = generateE2EUrl('action-sheet', type, rtl);
        if (rtl) {
            screenshotName = `${screenshotName} rtl`;
        }
        const page = await newE2EPage({
            url: pageUrl
        });
        const screenshotCompares = [];
        const presentBtn = await page.find(selector);
        await presentBtn.click();
        let actionSheet = await page.find('ion-action-sheet');
        await actionSheet.waitForVisible();
        screenshotCompares.push(await page.compareScreenshot(screenshotName));
        await afterScreenshotHook(page, screenshotName, screenshotCompares, actionSheet);
        await actionSheet.callMethod('dismiss');
        await actionSheet.waitForNotVisible();
        screenshotCompares.push(await page.compareScreenshot(`dismissed ${screenshotName}`));
        actionSheet = await page.find('ion-action-sheet');
        expect(actionSheet).toBe(null);
        for (const screenshotCompare of screenshotCompares) {
            expect(screenshotCompare).toMatchScreenshot();
        }
    }
    catch (err) {
        throw err;
    }
}
export async function testActionSheetBackdrop(page, screenshotName, screenshotCompares, actionSheet) {
    try {
        console.log('backdrop hook');
        const backdrop = await page.find('ion-backdrop');
        await backdrop.click();
        screenshotCompares.push(await page.compareScreenshot(`dismissed backdrop ${screenshotName}`));
        const isVisible = await actionSheet.isVisible();
        expect(isVisible).toBe(true);
    }
    catch (err) {
        throw err;
    }
}
export async function testActionSheetAlert(page, screenshotName, screenshotCompares) {
    try {
        const openAlertBtn = await page.find({ text: 'Open Alert' });
        await openAlertBtn.click();
        const alert = await page.find('ion-alert');
        await alert.waitForVisible();
        await page.waitFor(250);
        screenshotCompares.push(await page.compareScreenshot(`alert open ${screenshotName}`));
        const alertOkayBtn = await page.find({ contains: 'Okay' });
        await alertOkayBtn.click();
    }
    catch (err) {
        throw err;
    }
}
